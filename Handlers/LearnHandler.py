from asyncio import sleep

from aiogram import F, Router
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import  Message, CallbackQuery

from sqlalchemy.ext.asyncio import AsyncSession
from Database.orm_query import orm_get_rand_word

from states import Learn
from LOGGING.LoggerConfig import logger
from Handlers.defintions import button


# Learn Router
lr = Router()

@lr.message(StateFilter('*'), F.text == '/stop')
async def stop(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('–£—Ä–æ–∫ –æ–∫–æ–Ω—á–µ–Ω! üòÅ')

@lr.callback_query(StateFilter('*'), F.data == '–£—á–∏—Ç—å —Å–ª–æ–≤–∞')
async def learn_byb(call: CallbackQuery, state: FSMContext, session : AsyncSession):
    try:
        await state.set_state(Learn.Translate)
        await call.message.edit_text('–°–µ–π—á–∞—Å —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è —Å–ª–æ–≤–æ –Ω–∞ –ê–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ —Ç—ã –¥–æ–ª–∂–µ–Ω(–Ω–∞) –±—É–¥–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –†—É—Å—Å–∫–æ–º.\n\n–ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –±—É–¥–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–º, —Ç–æ –ø—Ä–∏–¥–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –µ—â–µ —Ä–∞–∑\n\n–ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –≤–µ—Ä–Ω—ã–π, —Ç–æ —Ç–µ–±–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ.\n\n<b>–ò —Ç–∞–∫ –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ —Ç—ã –Ω–µ –Ω–∞–∂–º–µ—à—å –∫–Ω–æ–ø–∫—É</b>')
        await sleep(5)

        word = await orm_get_rand_word(session=session)
        await call.message.answer(text=f"Word:<b>\n\n{word[0]}</b>\n\nNow enter it's translation:", reply_markup=button(text=['–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–∫']))
        await state.update_data(Translate = word[1])
    except Exception as e:
        logger.debug(f'–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.message.from_user.username} –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ learn: {e}')


@lr.message(StateFilter(None), Command('learnwords'))
async def learn(message: Message, session: AsyncSession, state: FSMContext):
    try:
        await state.set_state(Learn.Translate)
        await message.answer('–°–µ–π—á–∞—Å —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è —Å–ª–æ–≤–æ –Ω–∞ –ê–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ —Ç—ã –¥–æ–ª–∂–µ–Ω(–Ω–∞) –±—É–¥–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –†—É—Å—Å–∫–æ–º.\n\n–ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –±—É–¥–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–º, —Ç–æ –ø—Ä–∏–¥–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –µ—â–µ —Ä–∞–∑\n\n–ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –≤–µ—Ä–Ω—ã–π, —Ç–æ —Ç–µ–±–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ.\n\n<b>–ò —Ç–∞–∫ –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ —Ç—ã –Ω–µ –Ω–∞–∂–º–µ—à—å –∫–Ω–æ–ø–∫—É</b>')
        await sleep(5)

        word = await orm_get_rand_word(session=session)
        await message.answer(text=f"Word:<b>\n\n{word[0]}</b>\n\nNow enter it's translation:", reply_markup=button(text=['–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–∫']))
        await state.update_data(Translate = word[1])
    except Exception as e:
        logger.debug(f'–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username} –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ learn: {e}')


@lr.message(StateFilter(Learn.Translate), F.text)
async def check(message: Message, state: FSMContext, session: AsyncSession):
    try:  
        state_data = await state.get_data()
        if message.text.lower() == state_data["Translate"]:
            await message.answer("<b>True!</b> ü•≥\n\nLet's learn next word!")
            
            await sleep(1)

            word = await orm_get_rand_word(session=session)
            await message.answer(text=f"Word:\n\n<b>{word[0]}</b>\n\nNow enter it's translation:", reply_markup=button(text=['–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–∫']))
            await state.update_data(Translate = word[1])
        else:
            await message.answer('<b>False!</b>  üò®\n\nTry one more time!', reply_markup=button(['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']))
    except Exception as e:
        logger.debug(f'–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username} –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–ª–æ–≤–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ check: {e}')


@lr.callback_query(StateFilter('*'), F.data == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
async def skip(call : CallbackQuery, state: FSMContext, session: AsyncSession):
    await call.answer()
    word = await orm_get_rand_word(session=session)
    await call.message.edit_text(text=f"Word:\n\n<b>{word[0]}</b>\n\nNow enter it's translation:", reply_markup=button(text=['–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–∫']))
    await state.update_data(Translate = word[1])