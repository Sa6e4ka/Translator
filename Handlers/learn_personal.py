'''
–†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è —Å–ª–æ–≤–∞–º –∏–∑ –ª–∏—á–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
'''
from typing import Union
from asyncio import sleep

from aiogram import F, Router
from aiogram.filters import Command, StateFilter, or_f
from aiogram.fsm.context import FSMContext
from aiogram.types import  Message, CallbackQuery

from sqlalchemy.ext.asyncio import AsyncSession
from Database import orm_get_rand_personal_word

from Auxiliaries import button, Learn
from Loggs import error_handler_func

# Learn Router
learn_router = Router()


'''
–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è —Å–ª–æ–≤–∞–º –∏–∑ –ª–∏—á–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç 2 —Å—Ü–µ–Ω–∞—Ä–∏—è:
    –í–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã
    –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
'''
async def process_learn(state: FSMContext, session: AsyncSession, chat_id: int, message_or_call: Union[Message, CallbackQuery]):
    try:
        word = await orm_get_rand_personal_word(session=session, chat_id=chat_id)
        await state.set_state(Learn.Translate)
        intro_message = (
            "<b>Get ready!</b>\n\nLesson starts in 3 seconds!"
        )
        
        if isinstance(message_or_call, Message):
            await message_or_call.answer(intro_message)
            await sleep(3)

            await message_or_call.answer(
            text=f"The word:<b>\n\n{word[0]}</b>\n\nNow enter it's translation:",
            reply_markup=button(text=['Skip', "Stop lesson"])
        )
            await state.update_data(translation=word[1], word=word[0])
            return
        
        await message_or_call.message.edit_text(intro_message)
        await sleep(5)
        await message_or_call.message.edit_text(
            text=f"The word:<b>\n\n{word[0]}</b>\n\nNow enter it's translation:",
            reply_markup=button(text=['Skip', "Stop lesson"])
        )
        await state.update_data(translation=word[1], word=word[0])
    except AttributeError:
        error_messaage = "It seems like you stil don't have any words in your vocabulary ü§∑‚Äç‚ôÇÔ∏è"
        if isinstance(message_or_call, Message):
            await message_or_call.answer(error_messaage, reply_markup=button(["Main menu", "Save word"]))
            return
        await message_or_call.message.edit_text(error_messaage, reply_markup=button(text=["Main menu", "Save word"]))


'''
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è
'''
@learn_router.callback_query(or_f(F.data == "Stop lesson"))
@error_handler_func
async def stop_lesson(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text(text="The lesson was stopped!\n\nI hope that you're not going to give up so easily üòà", reply_markup=button(["Main menu"]))


'''
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è
'''
@learn_router.callback_query(or_f(F.data == 'Learn words'))
@error_handler_func
async def learn_byb(call: CallbackQuery, state: FSMContext, session : AsyncSession):
    await process_learn(state, session, call.message.chat.id, call)


'''
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è
'''
@learn_router.message(StateFilter(None), Command('learnwords'))
@error_handler_func
async def learn(message: Message, session: AsyncSession, state: FSMContext):
    await process_learn(state, session, message.chat.id, message)


'''
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–µ—Ä–µ–≤–æ–¥–∞:
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –∏ –¥–∞–µ—Ç –≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
'''
@learn_router.message(StateFilter(Learn.Translate), F.text)
@error_handler_func
async def check(message: Message, state: FSMContext, session: AsyncSession):
     
    state_data = await state.get_data()
    if message.text.lower() == state_data["translation"]:
        await message.answer("<b>True</b> ü•≥\n\nCatch the next one üëá")
        
        await sleep(1)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –∏–∑ –ª–∏—á–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        word = await orm_get_rand_personal_word(session=session, chat_id=message.chat.id)
        await message.answer(text=f"The word:<b>\n\n{word[0]}</b>\n\nNow enter it's translation:", reply_markup=button(text=['Skip', "Stop lesson"]))
        await state.update_data(translation = word[1], word = word[0])
        return
    
    await message.answer("<b>Wrong</b> üò®\n\nLets try one more time!", reply_markup=button(['Skip', "Stop lesson"]))


'''
–û–±—Ä–∞–±–æ—Ç—á–∏–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —Å–ª–æ–≤–∞
'''
@learn_router.callback_query(F.data == 'Skip')
@error_handler_func
async def skip(call : CallbackQuery, state: FSMContext, session: AsyncSession):
    await call.answer()
    sd = await state.get_data()
    await call.message.edit_text(
        text=f"The word - {sd["word"]}\n\nIt's translation - <b>{sd["translation"]}</b>"
    )
    await sleep(3)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –∏–∑ –ª–∏—á–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    word = await orm_get_rand_personal_word(session=session, chat_id=call.message.chat.id)
    await call.message.edit_text(text=f"The word:<b>\n\n{word[0]}</b>\n\nNow enter it's translation:", reply_markup=button(text=['Skip', "Stop lesson"]))
    
    await state.update_data(translation = word[1], word = word[0])