from asyncio import sleep

from aiogram import F, Router
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import  Message, CallbackQuery

from sqlalchemy.ext.asyncio import AsyncSession
from Database.orm_query import orm_get_def, orm_get_prompt

from states import Definitions
from LOGGING.LoggerConfig import logger

from aiogram.utils.keyboard import InlineKeyboardBuilder

# deleterouter
defr = Router()


def button(text : list):
    KB = InlineKeyboardBuilder()
    for i in text:
        KB.button(text=i, callback_data=i)
    KB.adjust(1,)
    return KB.as_markup()


@defr.callback_query(F.data == '–£—á–∏—Ç—å —Å–ª–æ–≤–∞ –ø–æ –¥–µ—Ñ–µ–Ω–∏—Ü–∏—è–º')
async def define_byb(call: CallbackQuery, state: FSMContext, session : AsyncSession):
    await call.answer()
    await call.message.answer('–°–µ–π—á–∞—Å —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–∫–æ–≥–æ-—Ç–æ –∏–∑—É—á–µ–Ω–Ω–æ–≥–æ —Ä–∞–Ω–µ–µ –Ω–∞–º–∏ —Å–ª–æ–≤–∞ –∏ —Ç—ã –¥–æ–ª–∂–µ–Ω –±—É–¥–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –Ω–∞ –ê–Ω–≥–ª–∏–π—Å–∫–æ–º.\n\n–ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, —Ç–æ —Ç—ã –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–¥—Å–∫–∞–∑–∫–æ–π, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –¥–∞–∂–µ —Ç–∞–∫, —Ç–æ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç –¥–µ—Ñ–∏–Ω–∏—Ü–∏—é –∏ —É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É.')
    await state.set_state(Definitions.first)

    await sleep(2)

    define = await orm_get_def(session=session)
    await state.update_data(word = define[0])
    await call.message.answer(text=f'<b>definition</b>\n\n{define[1]}\n\n<b>Now enter the word:</b>', reply_markup=button(text=['–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–∫']))


@defr.message(StateFilter(None),Command('definitions'))
async def define(message : Message, state:FSMContext, session: AsyncSession):
    await message.answer('–°–µ–π—á–∞—Å —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–∫–æ–≥–æ-—Ç–æ –∏–∑—É—á–µ–Ω–Ω–æ–≥–æ —Ä–∞–Ω–µ–µ –Ω–∞–º–∏ —Å–ª–æ–≤–∞ –∏ —Ç—ã –¥–æ–ª–∂–µ–Ω –±—É–¥–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –Ω–∞ –ê–Ω–≥–ª–∏–π—Å–∫–æ–º.\n\n–ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, —Ç–æ —Ç—ã –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–¥—Å–∫–∞–∑–∫–æ–π, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –¥–∞–∂–µ —Ç–∞–∫, —Ç–æ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç –¥–µ—Ñ–∏–Ω–∏—Ü–∏—é –∏ —É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É.')
    await state.set_state(Definitions.first)

    await sleep(2)

    define = await orm_get_def(session=session)
    await state.update_data(word = define[0])
    await message.answer(text=f'<b>definition</b>\n\n{define[1]}\n\n<b>Now enter the word:</b>', reply_markup=button(text=['–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–∫']))


@defr.message(StateFilter(Definitions.first), F.text)
async def check(message: Message, state: FSMContext, session: AsyncSession):
    word = await state.get_data()
    if message.text.lower() == word['word']:
        await message.answer("<b>True!</b>\n\nLet's learn another definition!")

        await sleep(1)

        define = await orm_get_def(session=session)
        await message.answer(text=f'<b>definition</b>\n\n{define[1]}\n\n<b>Now enter the word:</b>', reply_markup=button(text=['–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–∫']))
        await state.update_data(word = define[0], prompt=define[1])
    elif message.text == '/prompt':
        sd = await state.get_data()
        define = await orm_get_prompt(session=session, data=sd)
        await message.answer(f'prompt to this definition:\n\n{define}')
    else:
        await message.answer('<b>False!</b>\nTry one more time!\n\nIf you will not get it, you can use the prompt --> /prompt\n\nOr you can skip this definition üëá', reply_markup=button(['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–µ—Ñ–∏–Ω–∏—Ü–∏—é'])) 


@defr.callback_query(StateFilter('*'), F.data == '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–∫')
async def stop(call : CallbackQuery, state: FSMContext):
    await call.answer("DO NOT GIVE UP!!")
    await call.message.edit_text("Please don't go away ü•∫\n\nTry another functions!", reply_markup=button(text=['–£—á–∏—Ç—å —Å–ª–æ–≤–∞', '–£—á–∏—Ç—å —Å–ª–æ–≤–∞ –ø–æ –¥–µ—Ñ–µ–Ω–∏—Ü–∏—è–º', '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–æ–≤–∞']))
    await state.clear()

@defr.callback_query(StateFilter('*'), F.data == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–µ—Ñ–∏–Ω–∏—Ü–∏—é')
async def stop(call : CallbackQuery, state: FSMContext, session : AsyncSession):
    await call.answer()
    define = await orm_get_def(session=session)
    await call.message.answer(text=f'<b>definition</b>\n\n{define[1]}\n\n<b>Now enter the word:</b>', reply_markup=button(text=['–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–∫']))
    await state.update_data(word = define[0], prompt=define[1])