from aiogram.types import Message, CallbackQuery
import functools
from Loggs import logger
from Auxiliaries import button


'''
–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –æ—à–∏–±–æ–∫
'''
def error_handler_func(func):
    @functools.wraps(func)
    async def wrapper(*args, **kwargs):
        message_or_call = next((arg for arg in args if isinstance(arg, (Message, CallbackQuery))), None)
        try:
            return await func(*args, **kwargs)
        except Exception as e:
            username = (message_or_call.from_user.username 
                        if message_or_call and isinstance(message_or_call, (Message, CallbackQuery)) 
                        else 'Unknown user')
            logger.debug(f'–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ "{func.__name__}": {e}')
            
            if message_or_call:
                error_message = "–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üò®\n\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–∏ –æ–± —ç—Ç–æ–º @Megagigapoopfart"
                if isinstance(message_or_call, Message):
                    await message_or_call.answer(error_message, reply_markup=button(["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]))
                elif isinstance(message_or_call, CallbackQuery):
                    await message_or_call.message.edit_text(error_message, reply_markup=button(["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]))
    return wrapper