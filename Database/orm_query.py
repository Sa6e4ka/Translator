from sqlalchemy import select, update, delete, func
from sqlalchemy.ext.asyncio import AsyncSession
from Database.models import Words, User
from Loggs import logger


'''
–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
'''
async def orm_get_user_id(session: AsyncSession, chat_id) -> str:
    user_query = select(User.user_id).where(User.chat_id == chat_id)
    user_result  = await session.execute(user_query)
    return user_result.scalars().first()


'''
–§—É–Ω–∫—Ü–∏—è orm_add_user –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
'''
async def orm_add_user(session: AsyncSession, username: str, chat_id: str) -> bool: 
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã —Ä–µ–≥–∏—Å—Ç–∞—Ä—Ü–∏–∏
   
    query = select(User).where(User.chat_id == chat_id)
    result = await session.execute(query)

    if result.scalars().first(): 
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ") 
        return 
    
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª—É—á–∞–µ –µ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤ –±–∞–∑–µ
    user = User(
        username = username,
        chat_id = chat_id
    )

    session.add(user)
    await session.commit()


'''
–§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–æ–≤ –≤ –ª–∏—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
'''
async def orm_save_word(data : dict, session : AsyncSession) -> None:
# –ü–æ–ª—É—á–µ–Ω–∏–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
    id = await orm_get_user_id(session=session, chat_id=data["chat_id"])

# –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–±–æ—Ä–∫—É —Å–ª–æ–≤–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    querry = (
        select(Words.word)
            .where(
                Words.word == data['word'], 
                Words.user_id == id
            )
            .limit(1)
    )

    result = await session.execute(querry)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–ª–æ–≤–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ
    if result.scalars().first():

    # –ï—Å–ª–∏ —Å–ª–æ–≤–æ –≤ —Ç–∞–±–ª–∏—Ü–µ –∏–º–µ–µ—Ç—Å—è, —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–µ–º (—Å–∞–º–æ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥)
        update_query = (
            update(Words)
                .where(
                    Words.word == data['word']
                )
                .values(
                    translation = data['translation']
                )
        )
    
        await session.execute(update_query)
        await session.commit()
    
# –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ, –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –∏ —é–∑–µ—Ä–∞ –≤ —Ç–∞–±–ª–∏—Ü—É
    objects = Words(
        word = data['word'],
        translation = data['translation'],
        user_id = id
    )

    session.add(objects)
    await session.commit()


'''
–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
'''
async def orm_get_rand_personal_word(session: AsyncSession, chat_id : str) -> list:
# –ü–æ–ª—É—á–µ–Ω–∏–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    id = await orm_get_user_id(session=session, chat_id=chat_id)

# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–æ–≤ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏ –≤—ã–±–æ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    querry = (
        select(Words)
            .where(
                Words.user_id == id
            )
            .order_by(
                func.random()
            )
            .limit(1)
    )
    
    result = await session.execute(querry)
    scl = result.scalars().first()

# –≤–æ–∑–≤—Ä–∞—Ç —Å–ø–∏—Å–∫–∞ —Å–æ —Å–ª–æ–≤–æ–º –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–æ–º
    return scl.word, scl.translation



'''
–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
'''
async def orm_get_all_words(session : AsyncSession, chat_id : str) -> list:

# –ü–æ–ª—É—á–µ–Ω–∏–µ Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    id = await orm_get_user_id(session=session, chat_id=chat_id)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤
    query_words_list = (
        select(
            Words.word, 
            Words.translation
        )
            .where(
                Words.user_id == id
            )
            .order_by(Words.word.asc())
    )

    result = await session.execute(query_words_list)

    word_list = {row[0]: row[1] for row in result.fetchall()}

# –ü–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    query_count_words = select(func.count(Words.word)).where(Words.user_id == id)
    count_result = await session.execute(query_count_words)
    quantity = count_result.scalar_one()

    
    return word_list, quantity


'''
–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞
'''
async def orm_delete_word(session : AsyncSession, word, chat_id) -> None:
# –ü–æ–ª—É—á–µ–Ω–∏–µ id –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    id = await orm_get_user_id(session=session, chat_id=chat_id)

    query = (
        select(Words.word)
            .where(
                Words.word == word, 
                Words.user_id == id
            )
    )
    result = await session.execute(query)

    if result.scalars().first():
    # –ó–∞–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞
        query = (
            delete(Words)
                .where(
                    Words.word == word, 
                    Words.user_id == id
                )
        )
        await session.execute(query)
        await session.commit()
        return
    return "It seems like you don't have this word in your vocabulary yet üò®"